import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import java.util.Scanner;

public class MyGuess extends JDialog {
    private JPanel contentPane;
    private JButton buttonOK;
    private JButton buttonCancel;
    private JTextField inputNumberTextField;
    private JTextField againTextField;
    private JTextField myNumberTextField;
    private JTextField commentField1;
    private JButton checkNumberButton;
    private JTextField headerTextField;

    public MyGuess() {
        setContentPane(contentPane);
        setModal(true);
        getRootPane().setDefaultButton(buttonOK);

        checkNumberButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int a = Integer.parseInt(myNumberTextField.getText());
                compareInput(a);
            }
        });

        buttonOK.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onOK();
            }
        });

        buttonCancel.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        });

        // call onCancel() when cross is clicked
        setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                onCancel();
            }
        });

        // call onCancel() on ESCAPE
        contentPane.registerKeyboardAction(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                onCancel();
            }
        }, KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
    }

    private void onOK() {
        // add your code here
        System.out.println("Продолжаем!");
        startProgram();
        headerTextField.setText("Начинаем игру снова");
        commentField1.setText(null);
        againTextField.setText("Желаем удачи!");
    }

    private void onCancel() {
        // add your code here if necessary
        dispose();
    }

    public static void main(String[] args) throws IOException {
        MyGuess dialog = new MyGuess();
        dialog.startProgram();
        dialog.pack();
        dialog.setVisible(true);
        System.exit(0);
    }

    int digit;
    int counter = 3;

    public void startProgram() {
        System.out.println("Начинаем игру. Загадано число Х (от 0 до 9).");

        digit = getNumber();
        System.out.println("int digit = " + digit);
    }

    // Формируем случайное число от 0 до 9.
    public static int getNumber() {
        int number = (int) (Math.random() * 10);
// Для проверки работы временно выводим сформированное число:
        System.out.println("Загадано number = " + number);
        return number;
    }

    public void compareInput(int a) {
        System.out.println("counter = " + counter);
        if (digit > a) {
            commentField1.setText("Ваше число МЕНЬШЕ Х. Введите другое число.");
            System.out.println("digit = " + digit + ", ввели число a: " + a);
            myNumberTextField.setText(null);
            counter = counter - 1;
        } else if (digit < a) {
            commentField1.setText("Ваше число БОЛЬШЕ Х. Введите другое число.");
            System.out.println("digit = " + digit + ", ввели число a: " + a);
            myNumberTextField.setText(null);
            counter = counter - 1;
        } else if (digit == a) {
            System.out.println("ввели a: " + a + " равное digit = " + digit);
            commentField1.setText("ВЫ ПОБЕДИЛИ!");
            myNumberTextField.setText(null);
            againTextField.setText("Продолжить игру?");
            counter = 3;
        }
        if (counter <= 0) {
            commentField1.setText("ВЫ ПРОИГРАЛИ!");
            myNumberTextField.setText(null);
            againTextField.setText("Продолжить игру?");
            counter = 3;
        }

    }


    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(2, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1, true, false));
        panel1.add(panel2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonOK = new JButton();
        buttonOK.setMargin(new Insets(0, 0, 0, 0));
        buttonOK.setText("OK");
        panel2.add(buttonOK, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        buttonCancel = new JButton();
        buttonCancel.setText("Cancel");
        panel2.add(buttonCancel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        againTextField = new JTextField();
        againTextField.setEditable(false);
        Font againTextFieldFont = this.$$$getFont$$$(null, -1, 14, againTextField.getFont());
        if (againTextFieldFont != null) againTextField.setFont(againTextFieldFont);
        againTextField.setHorizontalAlignment(0);
        againTextField.setText("Желаем удачи!");
        panel1.add(againTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel4.add(spacer1, new GridConstraints(5, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        inputNumberTextField = new JTextField();
        inputNumberTextField.setBackground(new Color(-264242));
        inputNumberTextField.setEditable(false);
        inputNumberTextField.setEnabled(true);
        inputNumberTextField.setHorizontalAlignment(0);
        inputNumberTextField.setText("Введите своё число");
        panel4.add(inputNumberTextField, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        myNumberTextField = new JTextField();
        myNumberTextField.setBackground(new Color(-328966));
        myNumberTextField.setHorizontalAlignment(0);
        myNumberTextField.setInheritsPopupMenu(true);
        myNumberTextField.setText("");
        panel4.add(myNumberTextField, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(150, -1), null, 0, false));
        commentField1 = new JTextField();
        commentField1.setBackground(new Color(-855310));
        commentField1.setEditable(false);
        commentField1.setHorizontalAlignment(0);
        commentField1.setText("Здесь будет результат проверки");
        panel4.add(commentField1, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        checkNumberButton = new JButton();
        checkNumberButton.setBackground(new Color(-264242));
        checkNumberButton.setText("ПРОВЕРИТЬ");
        panel4.add(checkNumberButton, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        headerTextField = new JTextField();
        headerTextField.setEditable(false);
        Font headerTextFieldFont = this.$$$getFont$$$(null, Font.BOLD, 12, headerTextField.getFont());
        if (headerTextFieldFont != null) headerTextField.setFont(headerTextFieldFont);
        headerTextField.setHorizontalAlignment(0);
        headerTextField.setText("Загадано число Х (от 0 до 9).");
        panel4.add(headerTextField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
